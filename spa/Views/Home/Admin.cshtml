<!DOCTYPE html>

<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>SPA容器</title>
    <link href="bootstrap.min.css" rel="stylesheet">
    <link href="fileinput.min.css" rel="stylesheet">
    <link href="jsoneditor.min.css" rel="stylesheet">
    <link href="codemirror.css" rel="stylesheet">
    <link href="admin.css" rel="stylesheet">
    
    <script src="jquery.min.js"></script>
    <script src="bootstrap.min.js"></script>
    <script src="sweetalert.min.js"></script>
    <script src="fileinput.min.js"></script>
    <script src="jsoneditor.min.js"></script>
    <script src="codemirror.js"></script>

</head>
<body>
<nav class="navbar navbar-default navbar-fixed-top" role="navigation">
    <div class="container-fluid">
        <div class="navbar-header">
            <a class="navbar-brand" href="https://github.com/yuzd" target="_blank">SPA单页面应用容器</a>
        </div>
        <div>
            <ul class="nav navbar-nav">
                <li class="active">
                    <a href="#">首页</a>
                </li>
                <li>
                    <a href="#" onclick="globalJson()">全局配置</a>
                </li>
                <li>
                    <a href="/LogDashboard" target="_blank">日志</a>
                </li>                
            </ul>
        </div>
    </div>
</nav>

<div class="loading" data-asd="12" style="display: none" >
    <div class="loading-spinner">
        <div class="spinner-container container1">
            <div class="circle1"></div>
            <div class="circle2"></div>
            <div class="circle3"></div>
            <div class="circle4"></div>
        </div>
        <div class="spinner-container container2">
            <div class="circle1"></div>
            <div class="circle2"></div>
            <div class="circle3"></div>
            <div class="circle4"></div>
        </div>
        <div class="spinner-container container3">
            <div class="circle1"></div>
            <div class="circle2"></div>
            <div class="circle3"></div>
            <div class="circle4"></div>
        </div>
    </div>
</div>

<div class="content">
    <div class="div" id="up">
        <div class="subDiv11">
        </div>
        <div class="upload"></div>
        <div class="subDiv22">新建</div>
    </div>
    @foreach (var data in @ViewBag.List)
    {
        <div class="div">
            <div class="subDiv1">
                <p>@data.Title</p>
            </div>
            <div class="subDiv2">
                <p>更新日期：@data.Time</p>
            </div>
            <div class="subDiv3">
                <div class="closeButton" onclick="deleteSpa('@data.Title')"></div>
                <div class="reUploadDiv">
                    <div class="btn-group dropup reUploadButton">
                        <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown">
                            发布
                            <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu" role="menu">
                            <li>
                                <a href="#" onclick="reupload('@data.Title')" >重新上传(Upload)</a>
                            </li>
                            <li class="divider"></li>
                            <li>
                                <a href="#" onclick="rollback('@data.RollbackPath')" >回滚(Rollback)</a>
                            </li>
                            <li class="divider"></li>
                            <li>
                                <a href="#" onclick="serverJs('@data.Title')" >服务端渲染(SSR)</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    }
   
</div>

<div class="modal inmodal" id="jsonModel" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" >
        <div class="modal-content">
            <div class="modal-body" style="padding:0">
                <div class="form-group">
                    <div class="editor_holder" style="height: 350px;"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" onclick="closeSpa()">Close</button>
                <button type="button" class="btn btn-success" onclick="jsonSave()">保存</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h4 class="modal-title" id="myModalLabel">
					新建单页面应用
				</h4>
			</div>
			<div class="modal-body">
                <div class="form-group">
                    <label class="control-label">单页面名称：</label>
                    <input id="newAction" class="form-control" type="text" placeholder="全是英文小写，不能有特殊符号">
                </div>
                
                 <div class="form-group">
                    <label class="control-label">选择Zip(必须包含index.html)：</label>
                    <input id="upload1"  type="file" class="file" data-show-upload="false" />
                </div>
            </div>
			<div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal" onclick="closeSpa()">
					关闭
				</button>
				<button type="button" class="btn btn-primary" onclick="newSpa()">
					创建并部署
				</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="reModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel2" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="myModalLabel2">
                    重新上传
                </h4>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label class="control-label">单页面名称：</label>
                    <input id="newAction2" class="form-control" type="text" placeholder="全是英文小写，不能有特殊符号" readonly="readonly">
                </div>
                
                 <div class="form-group">
                    <label class="control-label">选择Zip(必须包含index.html)：</label>
                    <input id="upload2"  type="file" class="file" data-show-upload="false" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal" onclick="closeSpa()">
                    关闭
                </button>
                <button type="button" class="btn btn-primary" onclick="reSpa()">
                    提交更改
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal inmodal" id="jsModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" style="width: 850px">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" style="text-align:center">
                    [<span id="spaSpan"></span>]服务端SSR脚本编辑
                </h4>
            </div>
            <div class="modal-body" style="height:600px;padding: 0 !important;">
                <textarea id="code"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-white" onclick="closeSpa()">关闭</button>
                <button type="button" class="btn btn-primary" onclick="saveJs()">保存</button>
            </div>
        </div>
    </div>
</div>
    

<script>
var _setTimer = undefined;
    $(function() {
        //新上传
        $('.upload').on('click', function() {
            $('#myModal').modal({
                backdrop: 'static',
                keyboard: false
            });
        });

        //json编辑器
        var options2 = {
            schema: {},
            mode: 'code'
        };
        var container2 = $('.editor_holder')[0];
        window.jsonViewEditor = new JSONEditor(container2,options2);
        $('.jsoneditor-statusbar').hide();
        var hid = $(container2).find('.jsoneditor-poweredBy');
        $(hid).hide();
        $(hid).parent().append('<a class="jsoneditor-poweredBy jsonComment">全局配置</a>');

        window.cmEditor = window.cmEditor || {};
        cmEditor.editor = CodeMirror.fromTextArea(document.getElementById("code"), {
            mode: "application/javascript",
            theme: "eclipse",
            styleActiveLine: !0,
            lineNumbers: !0,
            lineWrapping: !0,
            autoCloseBrackets: !0,
            matchBrackets: !0,
            extraKeys: {
                "'.'": function(a) {
                    setTimeout(function() {
                        CodeMirror.showHint(a, CodeMirror.ternHint, {
                            async: !0
                        })
                    }, 100);
                    return CodeMirror.Pass;
                },
                "Alt-/": "contextAutocomplete",
                "Ctrl-I": function(a) {
                    CodeMirror.tern.showType(a)
                },
                "Alt-.": function(a) {
                    CodeMirror.tern.jumpToDef(a)
                },
                "Alt-,": function(a) {
                    CodeMirror.tern.jumpBack(a)
                },
                "Ctrl-Q": function(a) {
                    CodeMirror.tern.rename(a)
                },
                "Ctrl-/": function(a) {
                    commentSelection(true);
                },
                "Ctrl-Alt-/": function(a) {
                    commentSelection(false);
                },
                "Ctrl-Alt-C": function(a) {
                    autoFormatSelection();
                },
            },
            gutters: ["CodeMirror-lint-markers", "CodeMirror-foldgutter", "CodeMirror-linenumbers", "breakpoints"],
            highlightSelectionMatches: {
                showToken: /\w/,
                annotateScrollbar: true
            },
            textHover: {
                delay: 300
            },
            ternWith: {
                plugins: {
                    server: {}
                }
            },
            lint: {
                esversion: 6
            },
            scrollbarStyle: "simple",
            foldGutter: true,
        });

        cmEditor.editor.on("gutterClick", function(cm, n) {
            try {
                var info = cm.lineInfo(n);
                if (info.handle && info.handle.text.trim().length === 0)
                    return;
                cm.setGutterMarker(n, "breakpoints", info.gutterMarkers ? null : makeMarker());
            } catch (e) {}
        });

        function onChange(cm, textChanged) {
            cm.off("cursorActivity", autoComplete);
            //console.log('textChanged',textChanged);
            (_setTimer && clearTimeout(_setTimer));
            if (!textChanged.origin || textChanged.text.length == 0 || textChanged.origin == '+delete' || textChanged.origin == '+undo') {
                return;
            }

            if (textChanged.origin === '+input') {
                if (textChanged.text.length == 1) {
                    if (textChanged.text[0].trim().length == 0 || textChanged.text[0] == ':' || textChanged.text[0] == ',' || textChanged.text[0] == '\'' || textChanged.text[0] == ';' || textChanged.text[0] == '=' || textChanged.text[0] == '{}') {
                        return;
                    }
                } else if (textChanged.text.length == 2) {
                    if (textChanged.text[0].trim().length == 0 && textChanged.text[1].trim().length == 0) {
                        return;
                    }
                }
            }

            _setTimer = setTimeout(function() {
                cm.on("cursorActivity", autoComplete);
            }, 100);
        }
        ;cmEditor.editor.tabrisOnchange = onChange;
        cmEditor.editor.on('change', cmEditor.editor.tabrisOnchange);

        function autoComplete(cm) {

            if (cm.showHitTime > 0) {
                cm.showHitTime = 0;
                return;
            }
            //调用显示提示
            CodeMirror.showHint(cm, CodeMirror.ternHint, {
                async: !0
            });
            cm.off("cursorActivity", autoComplete);

        }
        cmEditor.editor.tabrisAutoComplete = autoComplete;
        function makeMarker() {
            var marker = document.createElement("div");
            marker.style.color = "#822";
            marker.innerHTML = "●";
            return marker;
        }
        $(document).keydown(function(event) {
            (_setTimer && clearTimeout(_setTimer));
            cmEditor.editor.off("change", cmEditor.editor.tabrisOnchange);
            //Ctrl +V
            if (event.ctrlKey && event.keyCode == 86) {} else if (event.ctrlKey && event.keyCode == 90) {//Ctrl +Z
            } else if (event.ctrlKey) {
            } else if (event.keyCode >= 116 && event.keyCode <= 123) {//F1-12
            } else if (event.keyCode >= 49 && event.keyCode <= 57) {//英文键盘上的数字键
            } else if (event.keyCode >= 96 && event.keyCode <= 105) {//小键盘的数字键
            } else if (event.keyCode > 32 && event.keyCode <= 40) {
                cmEditor.editor.off("cursorActivity", autoComplete);
            } else if (event.keyCode == 32) {
                cmEditor.editor.off("cursorActivity", autoComplete);
                //SPACE
            } else if (event.keyCode == 13) {
                cmEditor.editor.off("cursorActivity", autoComplete);
                //Enter
            } else {
                cmEditor.editor.on("change", cmEditor.editor.tabrisOnchange);
            }
        });

    });

    //关闭蒙层
    function closeSpa() {
        $('.fileinput-remove-button').click();
        $("#upload1").val("");
        $("#upload2").val("");
        $('.file-caption-name').html('');
        $('#myModal').modal('hide');
        $('#reModal').modal('hide');
        $('#roModal').modal('hide');
        $('#jsonModel').modal('hide');
        $('#jsModal').modal('hide');
        window.jsonViewEditor.setText('{}');
        window.cmEditor.editor.setValue('');
    }

    //新建并提交
    function newSpa() {
        var app = $('#newAction').val();
        if (!app) {
            swal({
                title: "",
                text: "请输入名称！",
                type: "error"
            });
            return;
        }
        var data = new FormData();
        var files = $("#upload1").get(0).files;
        if (!files || files.length < 1) {
            swal({
                title: "",
                text: "请选择文件！",
                type: "error"
            });
            return;
        }
        var file = files[0];
        data.append(file.name, file);
        spaJax('/' + app + '.upload', 'post', 'html', data, false, true).done(end);
    }

    //重新并提交
    function reSpa() {
        var app = $('#newAction2').val();
        if (!app) {
            swal({
                title: "",
                text: "请输入名称！",
                type: "error"
            });
            return;
        }
        var data = new FormData();
        var files = $("#upload2").get(0).files;
        if (!files || files.length < 1) {
            swal({
                title: "",
                text: "请选择文件！",
                type: "error"
            });
            return;
        }
        var file = files[0];
        data.append(file.name, file);
        spaJax('/' + app + '.reupload', 'post', 'html', data, false, true).done(end);
    }

    //回滚提交
    function rollback(spa) {
        if (!spa) {
            swal({
                title: "",
                text: "没有可回滚的版本号！",
                type: "error"
            });
            return;
        }
        swal({
            title: "确定要回滚上一个版本吗?",
            text: "上一个版本号：" + spa,
            icon: "warning",
            buttons: true,
            dangerMode: true,
        }).then((willDelete)=>{
            if (willDelete) {
                spaJax('/' + spa + '.rollback', 'get', 'html').done(end);
            }
        }
        );
    }

    //删除spa
    function deleteSpa(spa) {
        swal({
            title: "确定删除吗?",
            text: "将会删除单应用所有的文件",
            icon: "warning",
            buttons: true,
            dangerMode: true,
        }).then((willDelete)=>{
            if (willDelete) {
                spaJax('/' + spa + '.delete', 'get', 'html').done(end);
            }
        }
        );

    }

    function end(data) {
        if (data === 'success') {
            swal(data).then((value)=>{
                location.reload();
            }
            );
        } else {
            swal(data, {
                icon: "warning",
            });
        }
    }

    //重新上传spa
    function reupload(spa) {
        $('#newAction2').val(spa);
        $('#reModal').modal({
            backdrop: 'static',
            keyboard: false
        });
    }

    //封装ajax请求
    function spaJax(path, method, type, data, async, isFile) {
        var deferred = $.Deferred();
        var ajaxSettings = {
            url: path,
            data: data,
            dataType: type,
            method: method,
            beforeSend: function() {
                $('.loading').show();
            },
            complete: function() {
                $('.loading').hide();
            }
        };

        if (async) {
            ajaxSettings.async = async;
        }
        if (isFile) {
            ajaxSettings.contentType = false;
            ajaxSettings.processData = false;
        }
        $.ajax(ajaxSettings).done(function(response) {
            deferred.resolve(response);
        }).fail(function(response) {
            swal({
                title: "",
                text: "访问出错！",
                type: "error"
            });
            deferred.reject(response);
        });
        return deferred;
    }

    //全局配置json编辑器
    function globalJson() {
        spaJax('/getglobaljson.api', 'get', 'html').done(function(response) {
            if (response.indexOf('err:') > -1) {
                swal({
                    title: "",
                    text: response,
                    type: "error"
                });
                return;
            }
            showJsonModel(response);
        });
    }

    //展示json
    function showJsonModel(json) {
        window.jsonViewEditor.setText(json);
        window.jsonViewEditor.format();
        $('#jsonModel').modal({
            backdrop: 'static',
            keyboard: false
        });
    }

    //保存json
    function jsonSave() {
        var json = window.jsonViewEditor.getText();
        if (json.length < 1) {
            swal({
                title: "",
                text: '请输入json',
                type: "error"
            });
            return;
        }
        spaJax('/saveglobaljson.api', 'post', 'html', json).done(function(response) {
             if (response.substr(0,4) == 'err:') {
                swal({
                    title: "",
                    text: response,
                    type: "error"
                });
                return;
            }
            swal({
                title: "",
                text: response,
                type: "success"
            });
            closeSpa();
        });
    }

    //服务端渲染的serverjs配置
    function serverJs(spa) {
         spaJax('/' + spa +'-serverjsget.api', 'get', 'html').done(function(response) {
             if (response == 'notfound') {
                 response = 'module.exports = {\n'+
                             '  main:function (path){\n'+
                             '    \n'+
                             '  }\n'+
                             '};';
             }
             
             $('#spaSpan').html(spa);
                window.cmEditor.editor.setValue(response);
                setTimeout(function () {
                    window.cmEditor.editor.refresh();
                }, 1);
              $('#jsModal').modal({
                  backdrop: 'static',
                  keyboard: false
              });    
         });
         
  
    }

    //保存脚本
    function saveJs() {
      var spa = $('#spaSpan').html();
      if(!spa) return;
      var code = window.cmEditor.editor.getValue();
      if ($.trim(code).length <= 0) {
          swal({
              title: "",
              text: "请输入脚本！",
              type: "error"
          });
          return;
      }
     spaJax('/'+spa+ '-serverjssave.api', 'post', 'html', code).done(function(response) {
          if (response.substr(0,4) == 'err:') {
             swal({
                 title: "",
                 text: response,
                 type: "error"
             });
             return;
         }
         swal({
             title: "",
             text: response,
             type: "success"
         });
         closeSpa();
     });     
    }
    function getSelectedRange() {
        return {
            from: window.cmEditor.editor.getCursor(true),
            to: window.cmEditor.editor.getCursor(false)
        };
    }

    function autoFormatSelection() {
        var range = getSelectedRange();
        if (range.from.line == range.to.line && range.from.ch == range.to.ch)
            return;
        window.cmEditor.editor.autoFormatRange(range.from, range.to);
    }

    function commentSelection(isComment) {
        var range = getSelectedRange();
        window.cmEditor.editor.commentRange(isComment, range.from, range.to);
    }
</script>
</body>
</html>